package com.example.climatemonitoring.service;

import org.springframework.stereotype.Service;

import com.example.climatemonitoring.api.ClimaAPI;
import com.example.climatemonitoring.models.Clima;
import com.example.climatemonitoring.models.observers.ClimaSubject;
import com.example.climatemonitoring.models.observers.Observer;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Servi√ßo para gerenciamento de dados clim√°ticos de Lu√≠s Eduardo Magalh√£es -
 * BA.
 * Especializado no monitoramento clim√°tico para agricultura no oeste da Bahia.
 * Segue o princ√≠pio SRP ao ter apenas a responsabilidade de gerenciar dados
 * clim√°ticos espec√≠ficos de LEM.
 * Segue o princ√≠pio DIP ao depender de abstra√ß√µes (API) injetadas via
 * construtor.
 */
@Service
public class ClimaService {
    private ClimaAPI climaAPI;
    private ClimaSubject climaSubject;

    public ClimaService(ClimaAPI climaAPI) {
        this.climaAPI = climaAPI;
        this.climaSubject = new ClimaSubject();
    }

    /**
     * Obt√©m os dados clim√°ticos atuais de Lu√≠s Eduardo Magalh√£es.
     * 
     * @return Objeto Clima com os dados atuais de LEM
     */
    public Clima obterDadosClimaticos() {
        return climaAPI.obterDadosClimaticos();
    }

    /**
     * Obt√©m a an√°lise de risco para plantio nos pr√≥ximos dias em Lu√≠s Eduardo
     * Magalh√£es.
     * 
     * @return Array de strings com a an√°lise para cada dia
     */
    public String[] obterAnaliseRisco() {
        return climaAPI.obterAnaliseRisco();
    }

    /**
     * Adiciona um observador para receber notifica√ß√µes clim√°ticas.
     * 
     * @param observer Observador a ser adicionado
     */
    public void adicionarObservador(Observer observer) {
        climaSubject.addObserver(observer);
    }

    /**
     * Remove um observador.
     * 
     * @param observer Observador a ser removido
     */
    public void removerObservador(Observer observer) {
        climaSubject.removeObserver(observer);
    }

    /**
     * Notifica todos os observadores com uma mensagem.
     * 
     * @param mensagem Mensagem a ser enviada
     */
    public void notificarObservadores(String mensagem) {
        climaSubject.notifyObservers(mensagem);
    }

    /**
     * Gera um boletim clim√°tico formatado para Lu√≠s Eduardo Magalh√£es.
     * 
     * @return String formatada com o boletim clim√°tico de LEM
     */
    public String gerarBoletimClimatico() {
        try {
            Clima clima = obterDadosClimaticos();

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
            String dataHora = LocalDateTime.now().format(formatter);

            StringBuilder boletim = new StringBuilder();
            boletim.append("=== BOLETIM CLIM√ÅTICO - LU√çS EDUARDO MAGALH√ÉES/BA ===\n");
            boletim.append("Data/Hora: ").append(dataHora).append("\n");
            boletim.append("Localiza√ß√£o: ").append(clima.getLocalizacao()).append("\n\n");

            boletim.append("CONDI√á√ïES ATUAIS:\n");
            boletim.append(String.format("üå°Ô∏è  Temperatura: %.1f¬∫C\n", clima.getTemperatura()));
            boletim.append(String.format("üíß Umidade: %.0f%%\n", clima.getUmidade()));
            boletim.append(String.format("‚òÅÔ∏è  Condi√ß√µes: %s\n\n", clima.getCondicoes()));

            // Adicionar an√°lise de risco para agricultura
            boletim.append("AN√ÅLISE AGR√çCOLA - PR√ìXIMOS 3 DIAS:\n");
            String[] analiseRisco = obterAnaliseRisco();
            for (String risco : analiseRisco) {
                boletim.append("üìä ").append(risco).append("\n");
            }

            boletim.append("\n=== REGI√ÉO OESTE DA BAHIA - AGRICULTURA SUSTENT√ÅVEL ===");

            return boletim.toString();

        } catch (Exception e) {
            return "‚ùå Erro ao gerar boletim clim√°tico de Lu√≠s Eduardo Magalh√£es: " + e.getMessage();
        }
    }

    /**
     * Verifica se a API est√° funcionando corretamente para Lu√≠s Eduardo Magalh√£es.
     * 
     * @return true se a API estiver respondendo, false caso contr√°rio
     */
    public boolean verificarStatusAPI() {
        try {
            obterDadosClimaticos();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}